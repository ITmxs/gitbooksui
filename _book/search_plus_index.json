{"./":{"url":"./","title":"前言","keywords":"","body":"前言 参考资料 https://www.raywenderlich.com/24499516-getting-started-with-flutter https://www.tutorialspoint.com/flutter/index.htm https://flutterlearn.com/courses/basic-course 这才是宝藏 https://www.javatpoint.com/flutter https://flutterbyexample.com/ https://www.tutorialkart.com/flutter/ https://www.geeksforgeeks.org/flutter-tutorial/ 博客 https://dzone.com/articles/flutter-tutorial-for-developers-step-by-step-guide https://www.vogella.com/tutorials/Flutter/article.html 优质资源 https://www.filledstacks.com/tutorials/ 写作源泉 https://flutter-examples.com/category/flutter-tutorials/ https://blog.codemagic.io/flutter-step-by-step-tutorial/ https://googleflutter.com/ ----组件 国外博客 https://appunite.com/blog/how-to-create-smooth-flutter-tutorials https://codewithandrea.com/thank-you/ 可以 https://tsh.io/blog/flutter-tutorial-how-i-learned-to-use-this-framework/ dart https://dart.academy/ https://www.w3adda.com/dart-tutorial flutter 电子书 https://www.syncfusion.com/succinctly-free-ebooks/flutter-succinctly 我计划出40集左右，给大家展示flutter基础使用 https://kodestat.gitbook.io/flutter/ https://hackr.io/blog/how-to-learn-flutter 超赞集合 https://asmcn.icopy.site/awesome/awesome-flutter/ © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-09 10:34:20 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/作者介绍.html":{"url":"connent/作者介绍.html","title":"作者介绍","keywords":"","body":"作者介绍 公众号：“明天也要加油呀” 微信：xjg13690,拉你进群 自建博客：https://luckly.work/ 哔哩哔哩：https://space.bilibili.com/480883651 CSDN:https://blog.csdn.net/qq_39132095 知乎：https://www.zhihu.com/people/yimi-yang-guang-96-65 简书：https://www.jianshu.com/u/0c43689713e9 掘金：https://juejin.cn/user/3843548384077192 GitHub：https://github.com/ITmxs Gitee：https://gitee.com/itmxs 取得成就 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:20:33 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/flutter/移动开发.html":{"url":"connent/flutter/移动开发.html","title":"1.1遇见移动开发","keywords":"","body":"移动应用程序每年都在继续流行。随着这种增长，更新和更强大的工具正在兴起，以促进移动开发过程。一个风靡整个行业的产品：Flutter，一种用于构建跨平台应用程序的工具包。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-08 15:53:49 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/flutter/flutter是什么.html":{"url":"connent/flutter/flutter是什么.html","title":"1.2 遇见Flutter","keywords":"","body":"Flutter是什么 Flutter是一个开源软件开发工具包 (SDK)，用于“帮助开发者通过一套代码库高效构建多平台精美应用，支持移动、Web、桌面和嵌入式平台”。允许跨平台开发。这样可以使您的公司和团队节省大量时间和精力。 那么，这究竟是什么意思？假设我们有一位开发人员创建了一个惊人的应用程序，并且人们喜欢它。但是，该应用程序仅在 Android上受支持。因此，开发人员决定花费大量时间学习 IOS以支持更多用户使用他们的应用程序。即使在学习了如何构建 IOS应用程序之后，他们也意识到他们的应用程序必须支持所有类型的 IOS设备，然后去一一适配，这会让他们头秃。解决这些问题。只需引入Flutter就可以解决，这就是 Flutter 的用武之地。 Flutter 附带了大量预构建的小部件（rows, columns, stacks, padding, center, 等），使设计和布局移动应用程序变得更加容易。这意味着您不必为 IOS 应用程序和 Android 应用程序使用单独的代码库，而是可以利用 Flutter 并为您希望应用程序支持的所有不同平台使用一个代码库。一些使用 Flutter 的公司有 Google、Groupon、阿里巴巴、Square、eBay 等。 Flutter 是一个开源框架，用于跨移动操作系统（Android 和 iOS）创建高质量、高性能的移动应用程序。它提供了一个简单、强大、高效且易于理解的 SDK，用于使用 Google 自己的语言Dart编写移动应用程序。本教程将介绍 Flutter 框架的基础知识、Flutter SDK 的安装、设置 Android Studio 以开发基于 Flutter 的应用程序、Flutter 框架的架构以及使用 Flutter 框架开发所有类型的移动应用程序。 参考 https://www.educative.io/blog/flutter-tutorial 是什么让 Flutter 与众不同？ Flutter 与其他框架不同，因为它既不使用WebView，也不使用设备附带的OEM小部件。相反，它使用自己的高性能渲染引擎来绘制小部件。它还使用 Dart 编程语言实现了大部分系统，例如动画、手势和小部件，允许开发人员轻松阅读、更改、替换或删除内容。它为开发人员提供了对系统的出色控制。 Flutter 的特点 Flutter 提供了简单而简单的方法来开始构建漂亮的移动和桌面应用程序，其中包含一组丰富的材料设计和小部件。在这里，我们将讨论其用于开发移动框架的主要功能。 开源： Flutter 是一个用于开发移动应用程序的免费开源框架。 跨平台：这个特性允许 Flutter 一次编写代码，维护，可以在不同平台上运行。它节省了开发人员的时间、精力和金钱。 Hot Reload：每当开发人员对代码进行更改时，都可以通过 Hot Reload 立即看到这些更改。这意味着更改在应用程序本身中立即可见。这是一个非常方便的功能，它允许开发人员立即修复错误。 可访问的原生功能和 SDK：此功能通过 Flutter 的原生代码、第三方集成和平台 API 使应用程序开发过程变得轻松愉快。因此，我们可以轻松访问两个平台上的 SDK。 最少的代码： Flutter 应用程序由 Dart 编程语言开发，它使用 JIT 和 AOT 编译来提高整体启动时间，运行并加速性能。JIT 增强了开发系统并刷新了 UI，而无需花费额外的精力来构建新的系统。 小部件： Flutter 框架提供了小部件，它们能够开发可定制的特定设计。最重要的是，Flutter 有两组小部件：Material Design 和 Cupertino 小部件，它们有助于在所有平台上提供无故障的体验。 Flutter的优点是什么 专注于可定制的小部件，所有来自 Material Design 和 Cupertino 包（而不是 android XML）的小部件都可用于提供轻松的 UI 开发。 热重载可帮助开发人员立即看到他们的更改。这减少了开发时间以及错误修复时间。 一次编写，在任何平台上运行的任何代码都可以运行，无需更改。 Flutter 使用 Dart 编程语言，该语言同时使用提前编译和即时编译，从而提供高性能和更快的启动时间。 本机 ARM 机器代码允许在 Android 和 iOS 上实现本机性能。 Flutter 满足开发移动应用程序的自定义需求和要求。它还提供了许多优点，如下所列。 由于热重载功能，它使应用程序开发过程非常快。此功能允许我们更改或更新代码，一旦进行更改就会反映出来。 它提供了使用应用程序时更流畅和无缝的滚动体验，没有太多的挂起或削减，与其他移动应用程序开发框架相比，这使得应用程序运行速度更快。 Flutter 减少了测试的时间和精力。众所周知，flutter 应用程序是跨平台的，因此测试人员并不总是需要在不同平台上为同一个应用程序运行相同的测试集。 它具有出色的用户界面，因为它使用以设计为中心的小部件、高级开发工具、高级 API 以及更多功能。 它类似于反应式框架，开发人员无需手动更新 UI 内容。 由于其快速的开发过程和跨平台性质，它适用于 MVP（最小可行产品）应用程序。 Flutter 的缺点 我们在前面已经看到 Flutter 有很多优点，但它也包含一些缺点，下面给出。 Flutter 是一种相对较新的语言，需要通过脚本的维护来持续集成支持。 它提供对 SDK 库的非常有限的访问。这意味着开发人员没有很多功能来创建移动应用程序。此类功能需要由 Flutter 开发人员自己开发。 Flutter 应用程序不支持浏览器。它仅支持 Android 和 iOS 平台。 它使用 Dart 编程进行编码，因此开发人员需要学习新技术。但是，对于开发人员来说很容易学习。 本书的使用人群 本教程是为有志于在移动应用程序领域工作的专业人士准备的。本教程旨在让您熟悉 Flutter 框架及其各种功能的入门。 小型创业公司 先决条件 本教程的编写假设读者已经了解框架是什么，并且读者对面向对象编程有充分的了解，并且对 Android 框架和 Dart 编程有基本的了解。如果您是这些概念中的任何一个的初学者，我们建议您在开始使用 Flutter 之前先阅读与这些相关的教程。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-08 15:00:47 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/install/windows下安装flutter.html":{"url":"connent/install/windows下安装flutter.html","title":" 1.3.1 Windows下安装flutter","keywords":"","body":"Windows环境安装Flutter Windows 系统要求 要在 Windows 系统上安装和运行 Flutter，您首先需要满足您的开发环境的这些要求。 操作系统 Windows 7 或更高版本（我是 Windows 10。您也可以使用 Mac 或 Linux 操作系统。）。 磁盘空间 400 MB（不包括用于 IDE/工具的磁盘空间）。 工具 1. Windows PowerShell 2. Git for Windows 2.x（此处，从 Windows 命令提示符选项使用 Git）。 开发工具包 适用于 Windows 的 Flutter SDK 集成开发环境 Android Studio（官方），Vscode 安装 Flutter SDK 第一步：下载Flutter Software Development Kit for windows的安装包。要下载 Flutter SDK，请访问其官方网站，单击Get started按钮，您将看到以下屏幕。 第 2 步：接下来，要下载最新的 Flutter SDK，请单击 Windows图标。在这里，您将找到SDK的下载链接。 第 3 步：下载完成后，解压zip文件并将其放置在所需的安装文件夹或位置，例如 D:/Flutter。 注意： Flutter SDK 不应该放在需要管理员权限的地方。 第 4 步：要在常规 Windows 控制台中运行 Flutter 命令，您需要更新系统路径以包含 flutter bin 目录。执行此操作需要执行以下步骤： 步骤 4.1：转到 MyComputer 属性 -> 高级选项卡 -> 环境变量。您将看到以下屏幕。 Step 4.2: Now, select path -> click on edit. The following screen appears. 步骤4.3：在上面的窗口中，点击新建->变量值中Flutter bin文件夹的写入路径->确定->确定->确定。 第 5 步：现在，运行 $ flutter doctor命令。此命令检查 Flutter 应用程序开发的所有要求，并显示 Flutter 安装状态报告。 第 6 步：当您运行上述命令时，它将分析系统并显示其报告，如下图所示。在这里，您将找到运行 Flutter 所需的所有缺失工具的详细信息，以及可用但未与设备连接的开发工具。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-08 15:50:07 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/install/macos下安装flutter.html":{"url":"connent/install/macos下安装flutter.html","title":"1.3.2  Macos下安装flutter","keywords":"","body":"macOS 环境安装Flutter macOS 的系统要求 要在 macOS 系统上安装和运行 Flutter，您首先需要满足您的开发环境的这些要求。 操作系统 macOS（64 位） 磁盘空间 2.8 GB（不包括用于 IDE/工具的磁盘空间）。 工具 bash curl git 2.x mkdir rm unzip which 集成开发环境 Xcode（官方） 获取 Flutter SDK 步骤 1：下载 macOS 的 Flutter 软件开发工具包的安装包。要下载 Flutter SDK，请访问其官方网站。 第 2 步：下载完成后，解压缩 zip 文件并将其放置在所需的安装文件夹或位置。 将文件解压到目标路径, 比如: $ cd ~/development $ unzip ~/Downloads/flutter_macos_2.5.2-stable.zip 第三步：要运行Flutter命令，需要更新系统路径以包含flutter bin目录。 配置 flutter 的 PATH 环境变量： $ export PATH=\"$PATH:`pwd`/flutter/bin\" 第 4 步：接下来，使用以下命令在当前终端窗口中启用更新的路径，然后也进行验证。 source ~/.bashrc source $HOME/.bash_profile echo $PATH 第 5 步：现在，运行 $ flutter doctor命令。此命令检查 Flutter 应用程序开发的所有要求，并显示 Flutter 安装状态报告。 $ flutter doctor 第六步：当您运行上述命令时，它会分析系统和所有缺少的工具的详细信息，这些工具需要运行 Flutter 以及可用但未与设备连接的开发工具。 步骤 7：如果 Flutter doctor 工具报告，请安装最新的 Xcode 工具。 第八步：安装最新的Android Studio和SDK，如果Flutter Doctor工具报告了。 步骤 9：接下来，您需要设置一个 iOS 模拟器或将 iPhone 设备连接到系统以开发 iOS 应用程序。 第 10 步：再次设置 android 模拟器或将 android 设备连接到系统以开发 android 应用程序。 第 11 步：现在，安装 Flutter 和 Dart 插件以在 Android Studio 中构建 Flutter 应用程序。这些插件提供了创建 Flutter 应用程序的模板，提供了在 Android Studio 本身中运行和调试 Flutter 应用程序的选项。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-08 15:48:18 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/install/linux下安装flutter.html":{"url":"connent/install/linux下安装flutter.html","title":"1.3.3 Linux下安装flutter","keywords":"","body":"linux 环境安装Flutter 手动安装 Flutter 如果你没有 snapd，或者你无法使用它，那么你可以通过以下步骤安装 Flutter。 通过下载下面的安装包以获得最新 stable release 版本的 Flutter SDK： flutter_linux_2.5.2-stable.tar.xz 对于其他发布频道以及更久的构建版本，请查看 SDK 发布 页面。 将文件解压到合适的地方，例如： $ cd ~/development $ tar xf ~/Downloads/flutter_linux_2.5.2-stable.tar.xz 如果你不想安装安装包的补丁，你可以跳过步骤 1 或步骤 2，直接获取 Github 上 Flutter 仓库 的源码并执行以下命令： $ git clone https://github.com/flutter/flutter.git export PATH=\"$PATH:`pwd`/flutter/bin\" 你也可以按你的需要切换分支或者tag。例如，你可以使用 stable 版本的分支： $ git clone https://github.com/flutter/flutter.git -b stable 将 flutter 工具添加到环境变量中： $ export PATH=\"$PATH:`pwd`/flutter/bin\" 用这个命令添加 PATH 仅在当前的命令行视窗生效。要将 Flutter 永久添加到环境变量中，请参阅 更新您的路径。 可选步骤，提前下载二进制开发文件： flutter 工具将下载所需的平台特殊开发二进制文件。对于预下载这些工件更好的做法是（例如，在系统构建环境中，网络可能出现不通畅的问题），通过运行下面命令提前下载 iOS 和 Android 的二进制文件： $ flutter precache 对于这些可选的下载项，请参考 flutter help precache。 你现在可以运行 Flutter 命令了！ 提示 要更新已有 Flutter版本，请参阅升级你的 Flutter。 运行 flutter doctor 运行以下命令以查看是否还有缺失的依赖需要安装，你需要安装这些依赖以完成设置（要看到详细输出，请添加 -v 标识）： $ flutter doctor © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-08 15:47:48 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/dart简介.html":{"url":"connent/dart/dart简介.html","title":"2.1 Dart介绍","keywords":"","body":"Dart 是一种现代通用编程语言，最初由 Google 开发（由 Lars Bak 和 Kasper Lund 设计）。Dart 是一种新的编程语言，于 2007 年首次出现，其最新的稳定版本于 2021年9 月发布Dart SDK 2.14。 旨在通过独特的可移植性、生产力和稳健性组合来打造构建应用程序的最佳平台。了解 Dart 的人并不多，但 Flutter 的显着增长使其更受欢迎。 不仅用于开发移动应用程序，而且被 Ecma 批准为标准，用于构建 Web、服务器、桌面、移动应用程序和物联网 (IoT) 设备。Dart 是一种在语法上类似于 C 的面向对象的编程语言，如果您更喜欢 C 或 Java 作为编程语言，它可以很容易地学习。 本 Dart 教程是 Dart 语言编程的综合指南，本教程向您介绍了基本的 Dart 编程概念。循序渐进，阅读文本并运行示例程序。 观众 本教程是为想要从头开始学习 Dart 编程语言的人设计的。这个 Dart 教程是关于如何开始使用 Dart 编程的综合指南 先决条件 在开始本 Dart 教程之前，将假定您对编程和面向对象编程概念有足够的了解。如果您已经接触过任何编程语言，例如 C、Java、JavaScript、Kotlin、C# 或 Swift，那就更好了。 Dart教程 欢迎来到 Jianguo 的 Dart 教程。 在这一系列的 Dart 教程中，我们学习了 Dart 编程语言的基本概念。 学习 Dart 的先决条件 学习 Dart 编程语言没有特定的先决条件。当然，了解编程概念可以帮助您更快地学习。这些 Dart 教程旨在解决对编程一无所知的初学者。 如果您了解 C#、Java、JavaScript 等任何一种编程语言，学习 Dart 就会变得相对容易。 用于 Dart 编程的 IDE 您可以使用 PC 中的任何文本编辑器来编写 Dart 代码。或者，您也可以使用 Dart 编辑器。 Dart 编辑器对于开发人员来说非常轻巧且高效。 您还可以使用 Eclipse 或 IntelliJ IDE 来开发 Dart 应用程序。他们有丰富的 Dart 编辑经验。 Dart 在哪里使用？ Dart 用于： Flutter（移动应用开发） © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:56:02 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/hellodart.html":{"url":"connent/dart/hellodart.html","title":"2.2Helloword","keywords":"","body":"Dart Hello World 示例程序 Dart—你好世界 在本教程中，我们将编写一个非常基本的 Dart 程序。此示例程序打印Hello World到控制台。 打开文本编辑器并粘贴以下代码。 void main(){ print('Hello World'); } 将文件另存为hello.dart 或some_file_name_you_like.dart。让我们继续hello.dart。 打开命令提示符并转到hello.dart保存文件的文件夹。 执行以下命令hello.dart在当前工作目录中运行。 程序运行成功， Hello World字符串打印到控制台。 现在，我们将查看程序并分析代码。 以下是我们的Dart。 void main(){ print('Hello World'); } 每个 Dart 应用程序都有一个 main 函数main()。 void 表示该函数不返回任何内容。 main 后面的空括号()表示当前我们的 main 函数不接受任何参数。 main()函数体用花括号括起来{ }。 print() 是打印到控制台的高级 Dart 函数。 结论 在这个Dart 教程中，我们学习了如何用 Dart 编程语言编写一个简单的 hello world 程序并使用 dart 命令运行它。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:02:27 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/变量.html":{"url":"connent/dart/变量.html","title":"2.3变量","keywords":"","body":"Dart变量 Dart变量 Dart 是类型安全的。因此，大多数变量不需要显式类型声明。 创建变量 您可以使用var关键字创建变量。 var a; 由于没有为变量分配值，并且我们没有明确提及类型，因此变量的类型将是Null ，存储的值将是null。 为变量赋值 您可以使用赋值运算符为变量赋值=。 var a = ``'Hello World'``; 变量存储对实际值的引用。在上面的例子中，变量a 存储了对 String 对象的引用'Hello World'。 如果你给变量赋值，变量的类型会从值中推断出来。 显式声明 您可以显式声明变量的类型而不是var关键字。 String a = ``'Hello World'``; 使用不同数据类型的值重新分配变量 使用 dynamic 关键字，您可以重新分配与实际引用的数据类型不同的变量。 void main(){ dynamic a = 'Hello World'; a = 10; } 结论 在本Dart 教程中我们学习了如何声明和初始化变量、推理和显式声明。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:24:41 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/注释.html":{"url":"connent/dart/注释.html","title":"2.4注释","keywords":"","body":"Dart注释 Dart注释 欢迎来到 Dart 注释教程。 注释是 Dart 编译器忽略的语句。 您可以在程序中 dart 语句之间的任何位置编写注释。 在本教程中，我们将学习 Dart 编程语言支持的三种不同类型的注释。 单行注释 块（多行）注释 文档注释 单行注释 要编写单行注释，请使用双正斜杠// ，然后在同一行中写下您的注释。 void main(){ //this is comment //this is another comment } 块（多行）注释 您可以在/*和之间编写多行注释*/。以下是如何编写块注释的示例。 Dart void main(){ /* This is a block comment. It can contain multiple lines as comment. Another line in this block comment. */ } 文档注释 这些注释类似于单行注释。但受到 IDE 和 dartdoc 库的特殊处理。您可以使用这些文档注释来记录您开发的 dart 库中的类、方法等。 使用一些文档准备工具，您可以自动从代码生成文档。 Dart ///Documentation Comments ///Some description about main() method. void main(){ } 结论 在这个Dart 教程中我们学习了不同类型的注释技术以及如何使用它们。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:02:27 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/for循环.html":{"url":"connent/dart/for循环.html","title":"2.6for循环","keywords":"","body":"Dart For 循环 欢迎来到 Dart For 循环教程。 在本教程中，我们将学习如何编写 for 循环和一些 Dart 示例程序，以了解 Dart For 循环的用法。 Dart For 循环的语法 以下是 Dart 编程语言中 For 循环的语法。 for (initialization; boolean_expression; update) { //statement(s) } initialization 部分可以包含一个或多个正在初始化的变量。 根据boolean_expression每次迭代期间的输出，决定是否执行for循环中的语句。如果 boolean_expression 计算结果为true，则执行 for 循环内的语句。如果 boolean_expression 计算结果为false，则不执行 for 循环内的语句。 update 部分可以包含对变量的更新，例如增量、减量或它们值的任何类型的更改。 For循环的工作 当程序控制遇到 for 循环语句时，它执行初始化块。 然后评估 boolean_expression . 如果 boolean_expression 评估为 true ， 然后执行for循环内的语句。 然后执行更新部分。 现在转到第 2 步。 如果 boolean_expression 评估为false， 跳出圈套。 Dart For 循环计算一个数字的阶乘 在下面的示例中，我们将使用 Dart For Loop 来计算给定数字的阶乘。 Dart示例 void main(){ var n = 6; var factorial = 1; //for loop to calculate factorial for(var i=2; i输出 Factorial of 6 is 720 Dart 嵌套 For 循环 你可以在 Dart 的另一个 For 循环中编写一个 For 循环。这个过程称为嵌套。因此嵌套 For 循环。 Dart For 循环打印 * 三角形 在下面的示例中，我们将使用 Dart For Loop 将 *s 转换为直角三角形。 Dart示例 import 'dart:io'; void main(){ var n = 6; print(''); for(var i=1; i输出 注意：这里我们使用 stdout.write() 写入控制台，末尾没有换行符，这与 print() 不同。 结论 在这个Dart 教程中，我们在示例程序的帮助下学习了语法和如何使用 for 循环。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:03:53 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/字符串拼接.html":{"url":"connent/dart/字符串拼接.html","title":"字符串拼接","keywords":"","body":"Dart 字符串连接 在 Dart 中追加或连接两个字符串 欢迎来到 Dart 编程语言中的字符串连接教程。 有时，我们可能需要将一个字符串附加到另一个字符串。 在本教程中，我们将通过示例程序学习如何在 Dart 中附加两个字符串。 要在 Dart 中附加两个字符串，请使用连接运算符+。 + 接受两个字符串作为操作数并返回连接的字符串。 示例 – 在 Dart 中连接两个字符串 在本例中，我们将采用两个 Dart 字符串并使用+. Dart void main(){ String str1 = 'Tutorial'; String str2 = 'Kart'; //concatenate str1 and str2 String result = str1 + str2; print(result); } 输出 Jianguo 示例 – 在 Dart 中连接两个以上的字符串 在本例中，我们将采用三个 Dart 字符串并使用+. 我们可以链接+ 操作符。因此，我们可以在一个语句中连接两个以上的字符串。请注意以下示例。 Dart void main(){ String str1 = 'Welcome to '; String str2 = 'Tutorial'; String str3 = 'Kart'; //concatenate str1, str2 and str3 String result = str1 + str2 + str3; print(result); } 输出 Welcome to Jianguo 示例 – 用 int 连接字符串 您可以将 String 与其他类型的对象连接起来。您需要做的就是使用 object.toString() 方法将其他类型的 Dart 对象转换为 String。 在这个例子中，我们将采用一个 String 和一个 int 并使用+. 在连接期间，我们将 int 转换为 string。 Dart void main(){ String str1 = 'Welcome to '; int n = 24; //concatenate str1 and n String result = str1 + n.toString(); print(result); } 输出 Welcome to 24 结论 在本Dart 教程中，我们学习了如何附加或连接两个或更多字符串。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:03:53 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/字符串拆分.html":{"url":"connent/dart/字符串拆分.html","title":"字符串拆分","keywords":"","body":"如何在 Dart 中拆分字符串？ Dart分割线 本文是关于在 Dart 上拆分字符串的教程。 您可以使用 String.split() 方法以子字符串作为分隔符分割字符串。 split() 方法的语法是： split(Pattern pattern) 该函数返回一个字符串列表。 示例 – 在 Dart 中拆分字符串 在这个例子中，我们将采用一个由 delimiter 分隔的单词的字符串-。然后使用 split() 方法将其拆分为单词数组。 Dart void main(){ String str = 'hello-world-Jianguo'; //split string var arr = str.split('-'); print(arr); } 输出 [hello, world, Jianguo] 示例 – 在 Dart 中拆分字符串 在这个例子中，我们将采用一个由 delimiter 分隔的单词的字符串abc。分隔符从字符串中删除，部分作为列表返回。 Dart void main(){ String str = 'helloabcworldabcJianguo'; //split string var arr = str.split('abc'); print(arr); } 输出 [hello, world, Jianguo] 示例 – 在 Dart 中拆分逗号分隔的字符串 在此示例中，我们将采用一串逗号分隔值。我们将把这个 CSV 字符串拆分为值列表。 Dart void main(){ String str = '25,85,96,741,63'; //split string var arr = str.split(','); print(arr); } 输出 [25, 85, 96, 741, 63] 结论 在本Dart 教程中，我们学习了如何使用 String.split() 方法在 Dart 中使用分隔符子字符串拆分字符串。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:13:08 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/字符串替换.html":{"url":"connent/dart/字符串替换.html","title":"字符串替换","keywords":"","body":"如何在 Dart 中替换字符串中的子字符串？ Dart - 替换字符串中的子字符串 欢迎学习使用字符串中的另一个子字符串替换子字符串的教程。 要用新的子字符串替换字符串中所有出现的子字符串，请使用 String.replaceAll() 方法。 replaceAll() 方法的语法是： String.replaceAll(Pattern pattern, String newSubString) 该方法返回一个新字符串，其中给定的所有字符串匹配pattern替换为newSubString。你可以给一个字符串pattern。 示例 – 替换字符串中的子字符串 在这个例子中，我们将采取一个字符串和替换Hello用Hi在该字符串。 Dart void main(){ String str = 'Hello Jianguo. Hello User.'; //replace subString String result = str.replaceAll('Hello', 'Hi'); print(result); } 输出 Hi Jianguo. Hi User. 示例 – 替换字符串中的子字符串 在这个例子中，我们将采取一个字符串和替换Ola用Hi在该字符串。但是，该字符串不包含Ola. 让我们看看会发生什么。 Dart void main(){ String str = 'Hello Jianguo. Hello User.'; //replace subString String result = str.replaceAll('Ola', 'Hi'); print(result); } 输出 Hello Jianguo. Hello User. 由于提供的模式没有匹配项，replaceAll() 返回原始字符串的副本。 示例 – 链接 replaceAll() 方法 您可以链接 replaceAll() 方法。在这个例子中，我们将链接 replaceAll() 方法。请遵守以下 Dart 程序。 Dart void main(){ String str = 'Hello Jianguo. Hello User.'; //replaceAll() chaining String result = str.replaceAll('Hello', 'Hi').replaceAll('User', 'Client'); print(result); } 输出 Hi Jianguo. Hi Client. 首先replaceAll()替换Hello为Hi，然后在这个结果字符串上，第二个replaceAll()替换User为Client。 结论 在本Dart 教程中，我们学习了如何使用 replaceAll() 将字符串中所有出现的子字符串替换为另一个子字符串。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:03:53 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/字符串子串.html":{"url":"connent/dart/字符串子串.html","title":"字符串子串","keywords":"","body":"Dart子串 Dart子串 欢迎阅读有关如何在 Dart 编程中查找字符串的子字符串的教程。 您可以使用 String.substring() 方法在 Dart 中找到字符串的子字符串。 子串的语法是： String.substring(``int` `startIndex, [ ``int` `endIndex ]) 其中 substring 位于此 String 中的 [startIndex, endIndex) 范围内，不包括 endIndex 处的字符。 endIndex 是可选的，如果没有提供 endIndex，则取子字符串直到字符串的末尾。 示例 – Dart 中字符串的子字符串 在这个例子中，我们将取一个 String 并找到它的由开始索引和结束索引定义的子字符串。 Dart void main(){ String str = 'HelloJianguo'; //get string length int len = str.length; print(len); } 输出 Tutorial 给定字符串的索引范围是 H e l l o T u t o r i a l K a r t 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 示例 – Dart 中没有结束索引的字符串的子字符串 在这个例子中，我们将取一个字符串并找到它的由起始索引定义的子字符串。不应提供结束索引作为 substring() 方法的参数。在这种情况下，Dart 隐式地将字符串的长度作为结束索引。 Dart void main(){ String str = ''; //get string length int len = str.length; print(len); } 输出 Jianguo. 给定字符串的索引范围是 H e l l o T u t o r i a l K a r t .`` ``0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17`` ``^************************************************`` ``startingIndex 结论 在本Dart 教程中，我们学习了如何在给定起始索引和可选结束索引的情况下查找字符串的子字符串。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:17:05 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/字符串长度.html":{"url":"connent/dart/字符串长度.html","title":"字符串长度","keywords":"","body":"如何在 Dart 中找到字符串长度？ Dart – 字符串长度 欢迎来到有关查找字符串长度的教程。 要在 Dart 中查找给定字符串的长度，您可以使用 String 类的 length 属性。 获取字符串长度的语法是： String.length String.length 返回一个整数，指定字符串中的字符数或称为长度。 示例 – 查找字符串长度 在这个例子中，我们将取一个字符串并找到它的长度。 Dart void main(){ String str = 'HelloJianguo'; //get string length int len = str.length; print(len); } 输出 给定字符串的详细格式长度。 H e l l o T u t o r i a l K a r t`` ``1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 示例 – 空字符串的长度 在这个例子中，我们将找到一个空字符串的长度。当然，它会是零。但让它以编程方式验证。 Dart void main(){ String str = ''; //get string length int len = str.length; print(len); } 输出 0 结论 在本Dart 教程中，我们学习了如何使用属性来查找字符串的长度String.length。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:03:53 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/字符串修剪.html":{"url":"connent/dart/字符串修剪.html","title":"字符串修剪","keywords":"","body":"如何在 Dart 中修剪字符串？ 飞镖 - 修剪字符串 欢迎学习修剪字符串的教程。 要在 Dart 中修剪给定字符串的前导和尾随空格或空格字符，可以使用 String 类的 trim() 方法。 trim() 类的语法是： String.trim() String.trim() 返回一个新字符串，其中删除了该字符串的所有前导和尾随空格。 示例 – 修剪字符串 在这个例子中，我们将取一个字符串并修剪它的空白边缘。 void main(){ String str = ' Hello Jianguo '; //trim string String result = str.trim(); print(result); } 输出 Hello Jianguo 示例 – 在边缘使用制表符和换行符修剪字符串 在这个例子中，我们将取一个在其边缘带有空格、制表符和换行符的字符串，然后使用 trim() 来修剪这些白色字符。 void main(){ String str = ' \\n\\n\\t \\t Hello Jianguo \\t \\n '; //trim string String result = str.trim(); print(result); } 输出 Hello Jianguo 结论 在本Dart 教程中，我们学习了如何使用 方法修剪字符串 String.trim()。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:24:23 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/list操作/List介绍.html":{"url":"connent/dart/list操作/List介绍.html","title":"List介绍","keywords":"","body":"在本教程中，您将通过实际示例了解 Dart基础知识List及其应用。 Dart列表 在 Dart 中，列表数据类型用于表示对象的集合。一个列表是对象的有序组。List 数据类型实际上类似于其他编程语言中数组的概念。数组用于在单个变量中保存多个值，类似在 Dart 中，数组是一个 List 对象，在单个变量中保存多个对象/值，因此大多数人只称它们为列表。列表变量的定义是将值用逗号分隔并括在方括号 ([]) 中。 var list1 = [11, 12, 13]; 这里， list1 :-它是用于引用相应列表对象的标识符。 索引：-列表中的单个元素可以通过索引或下标（如 list_name[index]）轻松访问。列表的索引从零 (0) 开始到列表的最后一个元素 list_name[size-1]，其中 size 是列表中的元素数。 元素：-列表元素是指存储在给定列表中的实际值/对象。 在 Dart 中，列表可以分类为： 固定长度列表 可变长度的列表 Dart 固定长度列表 在 Dart 中，固定长度列表是定义了特定长度的列表。 例子 在下面的例子中，我们定义了一个长度为 3 的固定长度列表。 void main(){ //define list with fixed length var myList = new List(3); //assign list with items myList = [25, 63, 84]; print(myList); } 该语句new List(3);创建一个长度为 3 的固定长度列表。 输出 [25, 63, 84] 注意：对于固定长度列表，任何可能更改列表长度的操作都会引发错误。 Dart 可变长度的列表 在 Dart 中，与固定长度列表不同，可增长列表是用项目而不是长度定义的列表。 在 Dart 中有两种方法可以定义可增长列表。他们是： 将项目列表直接分配给变量。 创建一个没有参数传递给List()in的空列表new List()。 示例 1 在以下示例中，我们通过将项目列表直接分配给变量来定义可增长列表。 void main(){ var myList = [25, 63, 84]; print(myList); //add item to growable list myList.add(96); print(myList); } 输出 [25, 63, 84] [25, 63, 84, 96] 示例 2 在下面的示例中，我们通过不向 List() 类传递任何参数然后向列表中添加项目来定义一个空的可增长列表。 void main(){ var myList = new List(); myList.add(25); myList.add(63); myList.add(84); print(myList); } 输出 [25, 63, 84] 概括 在这篇文章中，我们学习了不同类型的列表，还看到了可以在 Dart 编程语言中对列表执行的不同操作。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-09 13:03:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/list操作/List遍历的几种方法.html":{"url":"connent/dart/list操作/List遍历的几种方法.html","title":"List遍历的几种方法","keywords":"","body":"Dart List – 迭代元素 在处理列表时，大多数时候我们可能需要遍历或迭代列表的元素。 在本教程中，我们将学习一些迭代 Dart 列表元素的方法。 使用 for 循环和索引，您可以从第一个元素开始到最后一个元素结束，将索引从 0 递增到列表的长度。 使用 List.forEach，您可以为列表的每个元素应用一个函数。 您可以获得列表元素的可迭代对象，并使用带有可迭代对象的 while 循环来迭代元素。 方式一使用 For 循环遍历 Dart 列表 在下面的 Dart 程序中，我们使用一个包含一些元素的列表。然后我们使用带有索引的 Dart For 循环遍历列表的所有元素。在每次迭代期间，我们只打印元素，证明我们可以访问该元素。 void main(){ //list var myList = [25, 63, 84]; //traverse through each element of list for(var i=0;i输出 25 63 84 因此，我们可以使用 for 循环遍历列表项。 方式二使用 forEach 迭代 Dart 列表 在下面的 Dart 程序中，我们为列表的每个元素应用打印函数。 void main(){ var myList = [24, 63, 84]; myList.forEach((element) => print(element) ); } 输出 25 63 84 方式三使用 Iterator 和 While 循环遍历 Dart 列表 类似Java中的iteator 在下面的 Dart 程序中，我们获取列表的迭代器并将其存储在一个变量中。然后在while循环中使用这个变量在每次迭代期间移动到下一个元素并访问该元素。在这个例子中，我们只是打印出元素。 void main(){ //list var myList = [25, 63, 84]; //get iterator to the list var myListIter = myList.iterator; //iterate over the list while(myListIter.moveNext()){ print(myListIter.current); } } 输出 25 63 84 方式四 增强for循环 循环遍历 List 中的数据 void main(){ //list var myList = [25, 63, 84]; for (var value in myList) { //value 就是List中对应的值 print(value); } } 您还可以为每个元素应用用户定义的函数，而不是我们在上述程序中使用的打印函数。 void processingFunc(var element){ //processing or transformation on the element var x=element%2; print(x); } void main(){ var myList = [24, 63, 84]; myList.forEach((element) => processingFunc(element) ); } 输出 0 1 0 我们只是为列表中的每个元素计算了除以 2 时的提醒。 结论 在本节中，我们学习了四种如何迭代 Dart 列表的方法。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:25:08 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/list操作/List反转.html":{"url":"connent/dart/list操作/List反转.html","title":"List反转","keywords":"","body":"Dart – 反转列表 Dart – 反转列表 您可以通过使用内置函数或使用具有交换机制的循环语句来反转 Dart 中的列表。 反转 List 会使第一个元素放在最后一个位置，第二个元素放在最后一个位置，依此类推。 一种特殊情况是，当您反转按升序排序的数字列表时，生成的反转列表将按降序排列。 在本教程中，我们将介绍一些反转 Dart 列表的方法。 使用 List.reversed 反转 Dart 列表 List.reversed 以相反的顺序返回此列表中对象的 Iterable。我们可以使用这个迭代器来初始化一个新的 List。 在下面的 Dart 程序中，我们获取一个列表并使用构造函数初始化一个新列表，并将new List.from()可迭代的反向列表作为参数传递给构造函数。 Dart void main(){ //a list var myList = [24, 56, 84, 92]; //intialize a new list from iterable to the items of reversed order var reversedList = new List.from(myList.reversed); print(reversedList); } 输出 D:\\Jianguo\\workspace\\dart_tutorial>dart example.dart``[92, 84, 56, 24] 列表的元素被反转。 通过在 For 循环中交换就地反转 Dart 列表 我们可以使用 for 循环迭代到列表的中间，并且对于每次迭代，我们将索引处的元素与 处的元素交换N-1-index。 当我们在原始列表中执行此操作时，原始列表最终将具有反向列表。因此，这称为就地反转 Dart 列表。 在下面的 Dart 程序中，我们将使用 for 循环和交换就地反转列表。 Dart void main(){ var myList = [24, 56, 84, 92]; for(var i=0;i输出 D:\\Jianguo\\workspace\\dart_tutorial>dart example.dart``[92, 84, 56, 24] 执行 for 循环后的原始列表包含反向列表。 使用反向列表反转 Dart 列表作为新列表并保存原始列表 此外，我们可以以某种原始方式反转列表。这里我们创建一个大小与原始列表相同的空列表，并将原始列表中的元素从末尾开始一个一个地复制到新列表中。 Dart void main(){ var myList = [24, 56, 84, 92]; var reversedList = new List(myList.length); for(var i=0;i输出 D:\\Jianguo\\workspace\\dart_tutorial>dart example.dart``[92, 84, 56, 24] 结论 在这个Dart 教程中，我们学习了如何使用 List.reversed 反转列表、带交换的 for 循环以及将元素从原始元素复制到反转元素的原始方法。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:25:21 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/list操作/List拼接.html":{"url":"connent/dart/list操作/List拼接.html","title":"List拼接","keywords":"","body":"Dart – 加入两个列表 Dart – 加入两个列表 您可以通过多种方式在 Dart 中连接两个列表。在本教程中，我们将通过两种方法来连接列表。 第一个是使用 List.addAll()。将列表作为参数传递给 addAll() 方法，您希望将其附加到此列表中。 第二种方式是遍历第二个列表并在迭代过程中将元素添加到第一个列表中。 使用 List.addAll() 在 Dart 中加入列表 在此示例中，我们采用两个列表list1和list2。然后使用 addAll() 附加list2到list1. List.addAll() 修改此列表。所以list1 被修改，即list2 的元素被附加到list1。 Dart void main(){ List list1 = [24, 'Hello', 84]; List list2 = [41, 65]; //join list2 to list1 list1.addAll(list2); print(list1); } 输出 [24, Hello, 84, 41, 65] 将其他列表的元素一一添加到第一个列表 这是连接两个列表的原始方式。在这里，我们遍历list2使用 forEach 的每个元素并将这些元素添加到list1. Dart void main(){ List list1 = [24, 'Hello', 84]; List list2 = [41, 65]; //join list2 to list1 list2.forEach((element) => list1.add(element)); print(list1); } 输出 [24, Hello, 84, 41, 65] 结论 在本Dart 教程中]，我们学习了如何使用 List.addAll() 和 List.add() 方法将一个列表附加或连接到另一个列表。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:26:22 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/list操作/List是否为空.html":{"url":"connent/dart/list操作/List是否为空.html","title":"List是否为空","keywords":"","body":"Dart - 检查列表是否为空 空列表意味着列表中没有元素。 有很多方法可以检查这一点。 空列表的长度属性返回零。 或者您可以使用内置属性List.isEmpty。List.isEmpty如果列表为空，则返回 true，否则返回 false。 我们还有一个内置属性来检查列表是否为空。但是这个检查列表是否不是空的。该物业是 List.isNotEmpty。 在本教程中，我们将通过这三种方法来查找列表是否为空。 使用 Length 属性检查 Dart 列表是否为空 在下面的 dart 程序中，我们编写了一个函数checkList()，它接收列表作为参数。它检查长度并根据返回值决定列表是否为空。 在主函数中，我们checkList()将为空列表和非空列表调用函数。 Dart void checkList(var myList){ //length of empty list is zero if(myList.length == 0){ print(\"List \"+myList.toString()+\" is empty\"); } else{ print(\"List \"+myList.toString()+\" is not empty\"); } } void main(){ var list1 = []; checkList(list1); var list2 = [24, 56, 84]; checkList(list2); } 输出 D:\\Jianguo\\workspace\\dart_tutorial>dart example.dart``List [] is empty``List [24, 56, 84] is not empty 结果是显而易见的。列表 [] 为空，列表 [24, 56, 84] 不为空。 使用 isEmpty 属性检查 Dart 列表是否为空 在下面的 Dart 程序中，我们将使用isEmptyList 类的属性来判断列表是否为空。 Dart void checkList(var myList){ //isEmpty returns true if list is emtpy if(myList.isEmpty){ print(\"List \"+myList.toString()+\" is empty\"); } else{ print(\"List \"+myList.toString()+\" is not empty\"); } } void main(){ var list1 = []; checkList(list1); var list2 = [24, 56, 84]; checkList(list2); } 输出 D:\\Jianguo\\workspace\\dart_tutorial>dart example.dart``List [] is empty``List [24, 56, 84] is not empty 使用 isNotEmpty 属性检查 Dart 列表是否为空 这与前面的示例相同，但我们使用的isNotEmpty是 List 类的属性。 Dart void checkList(var myList){ //isEmpty returns true if list is emtpy if(myList.isNotEmpty){ print(\"List \"+myList.toString()+\" is not empty\"); } else{ print(\"List \"+myList.toString()+\" is empty\"); } } void main(){ var list1 = []; checkList(list1); var list2 = [24, 56, 84]; checkList(list2); } 输出 D:\\Jianguo\\workspace\\dart_tutorial>dart example.dart``List [] is empty``List [24, 56, 84] is not empty 结论 在这个Dart 教程中，我们学习了一些使用一些内置函数检查列表是否为空或不在 Dart 中的方法。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:28:27 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/list操作/List是否相等.html":{"url":"connent/dart/list操作/List是否相等.html","title":"List是否相等","keywords":"","body":"Dart - 检查两个列表的相等性 Dart – 检查列表是否相等 您可以检查两个列表的元素是否相等。 让我们考虑如果两个列表在整个长度上具有相同的元素，则它们是相等的。 检查两个列表是否相等元素 在这个例子中，我们取了三个列表，其中两个列表的内容相等，第三个列表与前两个不同。 我们将编写一个函数 areListsEqual() 来检查给定的两个列表是否逐个元素相等。作为先决条件，我们检查给定的变量是否都是列表，然后比较它们的长度。 Dart bool areListsEqual(var list1, var list2) { // check if both are lists if(!(list1 is List && list2 is List) // check if both have same length || list1.length!=list2.length) { return false; } // check if elements are equal for(int i=0;i输出 list1 and list2 are equal.``list1 and list3 are not equal. 结论 在本Dart 教程中，我们学习了如何检查两个 List 的值是否相等。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:29:58 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/list操作/List中是否包含某元素.html":{"url":"connent/dart/list操作/List中是否包含某元素.html","title":"List是否包含某元素","keywords":"","body":"Dart - 检查列表是否包含元素 检查 Dart 列表是否包含元素 您可以检查 Dart 列表中是否存在元素。有很多方法可以检查列表中元素的存在。 解决方案 1： List.contains() 是一种方法，它接受一个元素并检查该元素是否存在于该列表中。 解决方案 2：迭代列表的元素并检查是否相等。当元素找到匹配项时，您可以打破循环并声明该元素出现在给定列表中。 在本教程中，我们将使用 Dart 程序完成上述解决方案。 使用 List.contains() 检查 Dart 列表是否包含元素 如果元素存在于此列表中，则 List.contains(element) 返回 true。否则，它返回false。 在这个 Dart 程序中，我们将获取一个数字列表并检查84 此列表中是否存在。我们也将检查号码77。 Dart bool areListsEqual(var list1, var list2) { // check if both are lists if(!(list1 is List && list2 is List) // check if both have same length || list1.length!=list2.length) { return false; } // check if elements are equal for(int i=0;i输出 84 is present in the list [24, 56, 84, 92]``77 is not present in the list [24, 56, 84, 92] 如84列表中所示，myList.contains(84)返回 true。 由于77列表中不存在，myList.contains(77)返回 true。 使用 For 循环和相同（）方法检查 Dart 列表是否包含元素 这是检查元素是否存在于列表中的一种非常原始的方法。 Dart void main(){ var myList = [24, 56, \"hello\", \"dart\"]; var element = \"hello\"; var present = false; for(var i=0;i输出 hello is present in the list [24, 56, hello, dart] 解决方案 1 优于解决方案 2。解决方案 2 只是为了理解还有另一种方法来检查元素是否存在于列表中。 结论 在本Dart 教程中，我们学习了如何使用 List.contains() 或 for 循环检查 Dart 列表中是否存在元素。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:35:35 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/Map介绍.html":{"url":"connent/dart/Map介绍.html","title":"Map","keywords":"","body":"Dart Map 在本教程中，您将通过实际示例了解 Dart Map 及其应用。 Dart Map Map 是一个对象，用于将一组值表示为键值对。在Map中，keys和values都可以是任何类型的对象，keys和values都可以是同一种类型的对象没有必要。。在Map中，每个key只能出现一次，但是同一个value可以多次使用. 在 Map 中，每个值都与一个唯一的键相关联，这个键用于访问对应的 Map 值。可以使用大括号 ({ }) 定义 Map，并且可以使用方括号 ([]) 分配和访问值。 var weekDays = {'Day1': 'Mon', 'Day2': 'Tue', 'Day3': 'Wed', 'Day4': 'Thu'}; 在 Dart 中声明 Map 在 Dart 中，可以通过以下两种方式声明 Map： 使用 Map文字 使用 Map 构造函数 使用 Map Literals 声明 Map 在 Dart 中，我们可以声明一个带有 Map文字的 Map，如下所示： 句法：- var = {key1:value1, key2:value2,..., key_n:value_n} 在这里，映射文字是一个键值对列表，用逗号分隔，用一对花括号({ })包围。键值对是由冒号(:)分隔的键和值的组合。 例子：- var weekDays = {'mon': 'Monday', 'tue': 'Tuesday', 'wed': 'Wednesday', 'thu': 'Thursday', 'fri': 'Friday', 'sat': 'Saturday', 'sun': 'Sunday'}; 使用 Map Constructor 声明/初始化 Map 在 Dart 中，我们可以使用映射构造函数声明/初始化映射，如下所示： 句法 ：- 声明一个空映射如下 - var &amp;lt;map_name&amp;gt; = new Map(); 现在，让我们按如下方式初始化 Map - map_name[key] = value; 例子：- void main() { var weekDays = new Map(); weekDays['mon'] = \"Monday\"; weekDays['tue'] = \"Tuesday\"; weekDays['wed'] = \"Wednesday\"; weekDays['thu'] = \"Thursday\"; weekDays['fri'] = \"Friday\"; weekDays['sat'] = \"Saturday\"; weekDays['sun'] = \"Sunday\"; print(weekDays); } 输出：- {mon: Monday, tue: Tuesday, wed: Wednesday, thu: Thursday, fri: Friday, sat: Saturday, sun: Sunday} Map属性 下面是 Dart Map 支持的属性列表。 PROPERTY 描述 Keys 返回一个可迭代对象，表示相应 Map对象中的所有键 Values 返回一个可迭代对象，表示相应 Map对象中的所有值 Length 返回 Map的大小 isEmpty 如果 Map 是空 Map，则返回 true isNotEmpty 如果 Map 至少有一项，则返回 true。 Map方法 下面是 Dart Map 支持的常用方法列表。 PROPERTY 描述 addAll() 将所有键值对添加到此映射中。 clear() 从 Map中删除所有键值对。 remove() 从 Map中删除键及其关联的值（如果存在）。 forEach() 迭代并将函数应用于映射的每个键值对。 在本教程中，我们通过实际示例了解了 Dart Map 及其应用。我希望你会喜欢这个教程。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:42:04 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"connent/dart/Sets介绍.html":{"url":"connent/dart/Sets介绍.html","title":"Sets","keywords":"","body":"在本教程中，您将通过实际示例了解 Dart Sets 及其应用。 Dart 套装 在 Dart 中，Set 是相同类型的不同值的无序列表。集合与数组非常相似，但它是无序的，不允许重复元素，集合中包含的每个值都是唯一的。Dart 集合是类型化的，因此一旦您声明了集合的类型或 Dart 推断出它，那么您将只有相同类型的元素。当我们想在单个变量中保存单一数据类型的不同值并且项目的顺序并不重要时，集合很有用。 Dart 声明/初始化集 有两种方法可以声明/初始化一个空集，{}在类型参数前面使用，或分配{}给类型变量Set. var setName = &lt;type&gt;{}; 或者 Set&lt;type&gt; setName = {}; 这里，SetName替换为 set 变量的名称，type替换为 set 的数据类型。 注意：- 映射文字的语法类似于集合文字的语法。如果您忘记了使用 {} 或分配给它的变量的类型注释，那么 Dart 将创建一个 Map 对象而不是 Set。 // var names = {}; // Creates a map, not a set. 例子：- void main() { var persons = &lt;String&gt;{\"John\", \"Doe\", \"Smith\", \"Alex\"}; print(\"W3Adda - Dart Declare/Initialize Set.\"); print(persons); } 输出：- 将元素添加到集合中 在 Dart 中，add()或addAll()函数用于在给定的集合中添加或插入项目。add() 方法用于将单个项目插入到现有集合中，而 addAll() 方法用于将多个项目添加到给定集合中。集合中的重复值将被忽略。 句法：- set_name.add(&lt;value&gt;); 例子：- void main() { var names = {\"John\", \"Doe\", \"Smith\", \"Alex\"}; var persons = &lt;String&gt;{}; print(\"W3Adda - Dart insert Item(s) into Set.\"); persons.add(\"Murphy\"); print(persons); persons.addAll(names); print(persons); } 输出：- Dart 在索引处获取集合元素 所述的ElementAt（）方法用于在指定的索引的位置来得到产品。Set 的索引从零 (0) 开始到 Set 的最后一个元素，即size – 1，其中size是一个集合中的元素数。如果您输入的数字大于最大索引，则会引发错误。 句法：- set_name.elementAt(&lt;index&gt;); 例子：- void main() { var persons = &lt;String&gt;{\"John\", \"Doe\", \"Smith\", \"Alex\"}; var p = persons.elementAt(2); print(\"W3Adda - Dart Get Item at Index.\"); print(p); } 输出：- Dart 获取集合元素计数 在 Dart 中，lenth属性可用于查找集合中元素的数量。 句法：- set_name.length; 例子：- void main() { var persons = &lt;String&gt;{\"John\", \"Doe\", \"Smith\", \"Alex\"}; var l = persons.length; print(\"W3Adda - Dart Get Set Length.\"); print(l); } 输出：- Dart 在集合中查找元素 Dart contains()方法可用于在集合中查找元素，它需要在集合中查找相同类型的单个元素，并返回一个布尔值来指示给定元素是否存在。 句法：- set_name.contains(&lt;value&gt;) 例子：- void main() { var persons = &lt;String&gt;{\"John\", \"Doe\", \"Smith\", \"Alex\"}; print(\"W3Adda - Dart find an Item in set.\"); if(persons.contains(\"Doe\")){ print(\"Given element found.\"); } else{ print(\"Given element not found.\"); } } 输出：- Dart 移除集合元素 在 Dart 中，remove()方法用于从给定集合中移除或删除元素。 set_name.contains(&lt;value&gt;) 句法：- 例子：- void main() { var persons = &lt;String&gt;{\"John\", \"Doe\", \"Smith\", \"Alex\"}; print(\"W3Adda - Dart remove an element from set.\"); print(\"Before Delete\"); print(persons); print(\"After Delete\"); persons.remove(\"Doe\"); print(persons); } 输出：- Dart 迭代集合元素 在 Dart 中，我们可以使用forEach方法循环遍历集合元素，如下所示： 例子：- void main() { var persons = &lt;String&gt;{\"John\", \"Doe\", \"Smith\", \"Alex\"}; print(\"W3Adda - Dart Iterating Set Elements.\"); persons.forEach((value) { print('Value: $value'); }); } 输出：- Dart 删除所有集合元素 的明确（）方法被用来去除或从给定组全部删除。 句法：- set_name.clear(); 例子：- void main() { var persons = &lt;String&gt;{\"John\", \"Doe\", \"Smith\", \"Alex\"}; print(\"W3Adda - Dart remove all elements from set.\"); print(\"Before Clear\"); print(persons); print(\"After Clear\"); persons.clear(); print(persons); } 输出：- Dart 转换集到列表 DarttoList()方法用于将 Set 对象转换为 List 对象。的类型List必须与Set元素的类型相同。 句法：- List&lt;type&gt; &lt;list_name&gt;= &lt;set_name&gt;.toList(); Dart 操作 在 Dart 中，我们可以对任何Set执行以下一些基本的 set 操作—— Union :-两个集合 a 和 b 的并集是集合 a 和 b 的组合值。 交集：-两个集合 a 和 b 的交集是一个包含两个集合中所有公共元素的集合。 减法：-两个集合 a 和 b 的减法集合包含集合 a 的所有元素并删除属于集合 b 的元素。 例子：- void main() { var a = &lt;int&gt;{10,12,14,16,18}; var b = &lt;int&gt;{5,7,9,11,13}; var c = &lt;int&gt;{2,3,5,7}; print(\"W3Adda - Dart Set Operations\"); print(\"b union a is\"); print(b.union(a)); print(\"b intersection a is\"); print(b.intersection(a)); print(\"b difference c is\"); print(b.difference(c)); } 输出：- Dart Sets属性 下面是 Dart Sets 支持的属性列表。 PROPERTY 描述 first 它返回集合中的第一个元素。 isEmpty 如果集合没有元素，则返回 true。 isNotEmpty 如果集合至少有一个元素，则返回 true。 length 它返回集合的长度/大小，也可以看作是给定集合中元素的数量。 last 它返回集合中的最后一个元素。 hashCode 它返回相应对象的哈希码。 Single 它用于检查集合是否只有一个元素并返回它。 在本教程中，我们通过实际示例了解了 Dart Sets 及其应用。我希望你会喜欢这个教程。 © luckly all right reserved，powered by Gitbook该文件修订时间： 2021-10-29 08:55:52 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}